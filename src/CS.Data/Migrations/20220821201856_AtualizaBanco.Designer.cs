// <auto-generated />
using System;
using CS.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace CS.Data.Migrations
{
    [DbContext(typeof(CsDbContext))]
    [Migration("20220821201856_AtualizaBanco")]
    partial class AtualizaBanco
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.6")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("CS.Domain.Entidades.Aluno", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<decimal>("Altura")
                        .HasColumnType("numeric");

                    b.Property<string>("Cpf")
                        .HasColumnType("text");

                    b.Property<DateTime>("DataNascimento")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Nome")
                        .HasColumnType("text");

                    b.Property<decimal>("Peso")
                        .HasColumnType("numeric");

                    b.Property<Guid>("UsuarioId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("UsuarioId");

                    b.ToTable("Aluno", "Sistema");
                });

            modelBuilder.Entity("CS.Domain.Entidades.Exercicio", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Descricao")
                        .HasColumnType("text");

                    b.Property<int>("GrupoCorporal")
                        .HasColumnType("integer");

                    b.Property<int>("QuantidadeRepeticao")
                        .HasColumnType("integer");

                    b.Property<string>("Restricao")
                        .HasColumnType("text");

                    b.Property<int>("TipoExercicio")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.ToTable("Exercicio", "Sistema");
                });

            modelBuilder.Entity("CS.Domain.Entidades.Perfil", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex");

                    b.ToTable("Perfil", "Identidade");
                });

            modelBuilder.Entity("CS.Domain.Entidades.PerfilPermissao", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("PerfilPermissao", "Identidade");
                });

            modelBuilder.Entity("CS.Domain.Entidades.Professor", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<decimal>("Altura")
                        .HasColumnType("numeric");

                    b.Property<string>("Cpf")
                        .HasColumnType("text");

                    b.Property<DateTime>("DataNascimento")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Nome")
                        .HasColumnType("text");

                    b.Property<decimal>("Peso")
                        .HasColumnType("numeric");

                    b.Property<Guid>("UsuarioId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("UsuarioId");

                    b.ToTable("Professor", "Sistema");
                });

            modelBuilder.Entity("CS.Domain.Entidades.Treino", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("AlunoId")
                        .HasColumnType("uuid");

                    b.Property<int>("DiaDaSemana")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("AlunoId");

                    b.ToTable("Treino");
                });

            modelBuilder.Entity("CS.Domain.Entidades.Usuario", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("integer");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("boolean");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("boolean");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("text");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("text");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("boolean");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("text");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("boolean");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex");

                    b.ToTable("Usuario", "Identidade");
                });

            modelBuilder.Entity("CS.Domain.Entidades.UsuarioLogin", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("text");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("text");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("text");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("UsuarioLogin", "Identidade");
                });

            modelBuilder.Entity("CS.Domain.Entidades.UsuarioPerfil", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("UsuarioId")
                        .HasColumnType("uuid");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.HasIndex("UsuarioId");

                    b.ToTable("UsuarioPerfil", "Identidade");
                });

            modelBuilder.Entity("CS.Domain.Entidades.UsuarioPermissao", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("UsuarioPermissao", "Identidade");
                });

            modelBuilder.Entity("CS.Domain.Entidades.UsuarioToken", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<string>("Value")
                        .HasColumnType("text");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("UsuarioToken", "Identidade");
                });

            modelBuilder.Entity("ExercicioTreino", b =>
                {
                    b.Property<Guid>("ExerciciosId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("TreinosId")
                        .HasColumnType("uuid");

                    b.HasKey("ExerciciosId", "TreinosId");

                    b.HasIndex("TreinosId");

                    b.ToTable("TreinosExercicios", "Sistema");
                });

            modelBuilder.Entity("CS.Domain.Entidades.Aluno", b =>
                {
                    b.HasOne("CS.Domain.Entidades.Usuario", "Usuario")
                        .WithMany()
                        .HasForeignKey("UsuarioId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.OwnsOne("CS.Domain.ValueObjects.Endereco", "Endereco", b1 =>
                        {
                            b1.Property<Guid>("AlunoId")
                                .HasColumnType("uuid");

                            b1.Property<string>("Bairro")
                                .HasColumnType("text")
                                .HasColumnName("Bairro");

                            b1.Property<string>("CEP")
                                .HasColumnType("text")
                                .HasColumnName("CEP");

                            b1.Property<string>("Cidade")
                                .HasColumnType("text")
                                .HasColumnName("Cidade");

                            b1.Property<string>("Complemento")
                                .HasColumnType("text")
                                .HasColumnName("Complemento");

                            b1.Property<int>("Estado")
                                .HasColumnType("integer")
                                .HasColumnName("Estado");

                            b1.Property<string>("Logradouro")
                                .HasColumnType("text")
                                .HasColumnName("Logradouro");

                            b1.Property<int>("Numero")
                                .HasColumnType("integer")
                                .HasColumnName("Numero");

                            b1.HasKey("AlunoId");

                            b1.ToTable("Aluno", "Sistema");

                            b1.WithOwner()
                                .HasForeignKey("AlunoId");
                        });

                    b.Navigation("Endereco");

                    b.Navigation("Usuario");
                });

            modelBuilder.Entity("CS.Domain.Entidades.PerfilPermissao", b =>
                {
                    b.HasOne("CS.Domain.Entidades.Perfil", "Perfil")
                        .WithMany("Permissoes")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Perfil");
                });

            modelBuilder.Entity("CS.Domain.Entidades.Professor", b =>
                {
                    b.HasOne("CS.Domain.Entidades.Usuario", "Usuario")
                        .WithMany()
                        .HasForeignKey("UsuarioId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.OwnsOne("CS.Domain.ValueObjects.Endereco", "Endereco", b1 =>
                        {
                            b1.Property<Guid>("ProfessorId")
                                .HasColumnType("uuid");

                            b1.Property<string>("Bairro")
                                .HasColumnType("text")
                                .HasColumnName("Bairro");

                            b1.Property<string>("CEP")
                                .HasColumnType("text")
                                .HasColumnName("CEP");

                            b1.Property<string>("Cidade")
                                .HasColumnType("text")
                                .HasColumnName("Cidade");

                            b1.Property<string>("Complemento")
                                .HasColumnType("text")
                                .HasColumnName("Complemento");

                            b1.Property<int>("Estado")
                                .HasColumnType("integer")
                                .HasColumnName("Estado");

                            b1.Property<string>("Logradouro")
                                .HasColumnType("text")
                                .HasColumnName("Logradouro");

                            b1.Property<int>("Numero")
                                .HasColumnType("integer")
                                .HasColumnName("Numero");

                            b1.HasKey("ProfessorId");

                            b1.ToTable("Professor", "Sistema");

                            b1.WithOwner()
                                .HasForeignKey("ProfessorId");
                        });

                    b.Navigation("Endereco");

                    b.Navigation("Usuario");
                });

            modelBuilder.Entity("CS.Domain.Entidades.Treino", b =>
                {
                    b.HasOne("CS.Domain.Entidades.Aluno", "Aluno")
                        .WithMany("Treinos")
                        .HasForeignKey("AlunoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Aluno");
                });

            modelBuilder.Entity("CS.Domain.Entidades.UsuarioLogin", b =>
                {
                    b.HasOne("CS.Domain.Entidades.Usuario", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("CS.Domain.Entidades.UsuarioPerfil", b =>
                {
                    b.HasOne("CS.Domain.Entidades.Perfil", "Perfil")
                        .WithMany("PerfilUsuarios")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CS.Domain.Entidades.Usuario", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CS.Domain.Entidades.Usuario", null)
                        .WithMany("UsuarioPerfis")
                        .HasForeignKey("UsuarioId");

                    b.Navigation("Perfil");
                });

            modelBuilder.Entity("CS.Domain.Entidades.UsuarioPermissao", b =>
                {
                    b.HasOne("CS.Domain.Entidades.Usuario", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("CS.Domain.Entidades.UsuarioToken", b =>
                {
                    b.HasOne("CS.Domain.Entidades.Usuario", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ExercicioTreino", b =>
                {
                    b.HasOne("CS.Domain.Entidades.Exercicio", null)
                        .WithMany()
                        .HasForeignKey("ExerciciosId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CS.Domain.Entidades.Treino", null)
                        .WithMany()
                        .HasForeignKey("TreinosId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("CS.Domain.Entidades.Aluno", b =>
                {
                    b.Navigation("Treinos");
                });

            modelBuilder.Entity("CS.Domain.Entidades.Perfil", b =>
                {
                    b.Navigation("PerfilUsuarios");

                    b.Navigation("Permissoes");
                });

            modelBuilder.Entity("CS.Domain.Entidades.Usuario", b =>
                {
                    b.Navigation("UsuarioPerfis");
                });
#pragma warning restore 612, 618
        }
    }
}
